MACRO(PrintVar name)
    MESSAGE(STATUS "${name}: \"${${name}}\"")
ENDMACRO()

MACRO(ListAppend)
    LIST(APPEND ${ARGN})
ENDMACRO()

MACRO(SListAppend name)
    SET("${name}" "${${name}} ${ARGN}")
ENDMACRO()

MACRO(NewList name)
    SET("${name}" tmp)
    LIST(REMOVE_ITEM "${name}" tmp)
    ListAppend("${name}" ${ARGN})
ENDMACRO()

MACRO(NewSList name)
    SET("${name}" "")
    SListAppend("${name}" ${ARGN})
ENDMACRO()

FUNCTION(ListToSList name)
    NewSList(t)
    FOREACH(i IN LISTS "${name}")
        SListAppend(t "${i}")
    ENDFOREACH()
    SET("${name}" "${t}" PARENT_SCOPE)
ENDFUNCTION()

MACRO(SListToList name)
    SEPARATE_ARGUMENTS("${name}")
ENDMACRO()

# Calculate version strings for code:
FUNCTION(CalculateVersionForCode in out)
    SET(hexdigit "[0123456789abcdefABCDEF]")
    SET(hexnumber "0|[123456789abcdefABCDEF]${hexdigit}*")
    SET(hexversion "^(${hexnumber})\\.(${hexnumber})\\.(${hexnumber})$")
    STRING(REGEX MATCHALL "${hexversion}" r "${in}")
    IF(NOT r)
      MESSAGE(FATAL_ERROR "Invalid version string in \${SWORDXX_VERSION}!")
    ENDIF()
    UNSET(r)
    SET(major "${CMAKE_MATCH_1}")
    SET(minor "${CMAKE_MATCH_2}")
    SET(patch "${CMAKE_MATCH_3}")
    SET("${out}" "(((${major}*65536u)+${minor})*65536u)+${patch}" PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(ExpandLibs dirs names out)
    NewList(outLibs)
    FOREACH(lib IN LISTS names)
        FIND_LIBRARY(t NAMES "${lib}" PATHS ${dirs} NO_DEFAULT_PATH)
        IF(NOT t)
            FIND_LIBRARY(t NAMES "${lib}" PATHS ${dirs})
        ENDIF()
        IF(t)
            ListAppend(outLibs "${t}")
        ELSE()
            ListAppend(outLibs "${lib}")
        ENDIF()
        UNSET(t CACHE)
    ENDFOREACH()
    SET("${out}" "${outLibs}" PARENT_SCOPE)
ENDFUNCTION()

MACRO(SwordxxHandleConditionalBuild name cond defaultValue linking)
    IF(NOT (DEFINED "SWORDXX_BUILD_${cond}"))
        SET("SWORDXX_BUILD_${cond}" "${defaultValue}")
    ENDIF()
    IF(SWORDXX_BUILD_${cond})
        IF("${linking}" AND NOT SWORDXX_INSTALL_SHARED)
            MESSAGE(STATUS
                "Building ${name}: no (SWORDXX_INSTALL_SHARED not enabled)")
            SET("SWORDXX_BUILD_${cond}" FALSE)
            SET("SWORDXX_${cond}_EXCLUDE" EXCLUDE_FROM_ALL)
        ELSE()
            MESSAGE(STATUS "Building ${name}: yes")
            SET("SWORDXX_${cond}_EXCLUDE" "")
        ENDIF()
    ELSE()
        MESSAGE(STATUS "Building ${name}: no")
        SET("SWORDXX_${cond}_EXCLUDE" EXCLUDE_FROM_ALL)
    ENDIF()
ENDMACRO()
